{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "nameprefix": {
            "type": "string"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "skuTier": {
            "type": "string"
        },
        "skuCapacity": {
            "type": "string"
        },
        "isAutoInflateEnabled": {
            "type": "string"
        },
        "maximumThroughputUnits": {
            "type": "string"
        },
        "zoneRedundant": {
            "type": "bool"
        },
        "tags": {
            "type": "object"
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "Storage account SKU name."
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        },
        "objectId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "list"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "create",
                "update"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "standard",
            "allowedValues": [
                "standard",
                "premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "secretsObject": {
            "type": "secureObject",
            "metadata": {
                "description": "Specifies all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object."
            }
        },
        "adtDomainName": {
            "type": "string",
            "defaultValue": ".api.weu.digitaltwins.azure.net"
        },
        "cdfClientId": {
            "type": "string",
            "metadata": {
                "description": "Client ID of the App Registration that will be used to access Cognite Data Fusion. Store the client secret in the keyvault."
            }
        },
        "cdfTenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Tenant ID of the App Registration that will be used to access Cognite Data Fusion. Store the client secret in the keyvault."
            }
        },
        "cdfCluster": {
            "type": "string",
            "allowedValues": [
                "api",
                "westeurope-1",
                "az-eastus-1"
            ],
            "metadata": {
                "description": "CDF cluster."
            }
        },
        "cdfProject": {
            "type": "string",
            "metadata": {
                "description": "Cognite project name"
            }
        },
        "rootAssetExternalID": {
            "type": "string",
            "defaultValue": "adt_root",
            "metadata": {
                "description": "Root Asset of ADT resources created in CDF"
            }
        }
    },
    "variables": {
        "functionAppName": "[concat(parameters('nameprefix'),'-FunctionApp-', uniqueString(resourceGroup().id))]",
        "hostingPlanName": "[concat(parameters('nameprefix'),'-FunctionApp-', uniqueString(resourceGroup().id))]",
        "applicationInsightsName": "[concat(parameters('nameprefix'),'-AppInsights-', uniqueString(resourceGroup().id))]",
        "keyVaultName": "[concat(parameters('nameprefix'),'-kv-', uniqueString(resourceGroup().id))]",
        "storageAccountName": "[concat(parameters('nameprefix'),uniqueString(resourceGroup().id))]",
        "functionWorkerRuntime": "python"
    },
    "resources": [
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2021-06-01-preview",
            "name": "[concat(parameters('nameprefix'),'-eventhub-', uniqueString(resourceGroup().id))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('skuTier')]",
                "tier": "[parameters('skuTier')]",
                "capacity": "[parameters('skuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": "[parameters('isAutoInflateEnabled')]",
                "maximumThroughputUnits": "[parameters('maximumThroughputUnits')]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
            }
        },
        {
            "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
            "apiVersion": "2021-06-30-preview",
            "name": "[concat(parameters('nameprefix'),'-ADT-', uniqueString(resourceGroup().id))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "S1"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-08-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "kind": "Storage"
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-03-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "kind": "linux",
            "properties": {
                "reserved": true
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "kind": "functionapp",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "~10"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey]"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "[variables('functionWorkerRuntime')]"
                        },
                        {
                            "name": "ADT_URL",
                            "value": "[concat('https://', parameters('nameprefix'),'-ADT-', uniqueString(resourceGroup().id), '.api.weu.digitaltwins.azure.net')]"
                        },
                        {
                            "name": "CDF_CLIENT_SECRET",
                            "value": "secret"
                        },
                        {
                            "name": "CDF_CLIENTID",
                            "value": "[parameters('cdfClientId')]"
                        },
                        {
                            "name": "CDF_CLUSTER",
                            "value": "[parameters('cdfCluster')]"
                        },
                        {
                            "name": "CDF_TENANTID",
                            "value": "~[parameters('cdfTenantId')]"
                        },
                        {
                            "name": "CDF_PROJECT",
                            "value": "[parameters('cdfProject')]"
                        },
                        {
                            "name": "ROOT_ASSET_EXTERNAL_ID",
                            "value": "[parameters('rootAssetExternalId')]"
                        }
                    ],
                    "ftpsState": "FtpsOnly",
                    "minTlsVersion": "1.2"
                },
                "httpsOnly": true
            },
            "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('applicationInsightsName')]",
            "location": "[parameters('location')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2021-04-01-preview",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('skuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "copy": {
                "name": "secrets",
                "count": "[length(parameters('secretsObject').secrets)]"
            },
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2021-04-01-preview",
            "name": "[format('{0}/{1}', variables('keyVaultName'), parameters('secretsObject').secrets[copyIndex()].secretName)]",
            "properties": {
                "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ]
        }
    ]
}